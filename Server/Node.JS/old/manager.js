var bcrypt      =   require('bcryptjs');
var crypto      =   require('crypto');
var nodemailer  =   require("nodemailer");
var mysql       =   require('mysql');
var os          =   require('os');

var manager = function(config)    {
    var _man = this;
    if(config == undefined) {
        console.log("Error: No parameters defined.");
    }else{
        this.config =   config;
        this.db     =   mysql.createConnection({
            host     : config.myhost,
            user     : config.myuser,
            password : config.mypass,
            database : config.mydb
        });
        this.db.connect();
        this.LoadCache();
        this.smtp   =   nodemailer.createTransport("SMTP",{
            service: "AliveControl",
            host: config.mailhost,
            port: config.mailport === undefined ? 587 : config.mailport,
            auth: {
                user: config.mailuser,
                pass: config.mailpass
            }
        });   
        this.mailoptions    =   {
            from    :   config.mailfromname + " <"+config.mailfrom+">",
            to      :   config.mailtoname   + " <"+config.mailto+">",
            subject :   config.mailsubject === undefined ? "Alive Control Report ("+os.hostname()+")" : config.mailsubject,
            headers :   {
                "X-ALIVECONTROL-TIME"   :   Date.now(),
                "X-ALIVECONTROL-SERVER" :   config.servername   === undefined ? os.hostname()   :   config.servername   ,
                "X-ALIVECONTROL-UPTIME" :   os.uptime()
            } ,
            text    :   config.mailtext,
            html    :   config.mailhtml
        };
        this.config.diskminspace =   this.config.diskminspace !== undefined ? this.config.diskmin : 10;
           
        this.Process    =   setTimeout(function(){_man.CheckAlives();}, config.roundtime === undefined ? 10*60*1000 :  config.roundtime*1000);
        this.AdvProcess =   setTimeout(function(){_man.AdvCheck();}, 30*60*1000);
    }
};

manager.prototype.AddEmail      =   function(email) {
    this.cache.emails.push(email);
    console.log("Added message to queue: "+email.name);
};

manager.prototype.FlushEmails   =   function()  {
    var toRemove = [];
    for(var i in this.cache.emails) {
        this.SendEmail(this.cache.emails[i]);
        toRemove.push(this.cache.emails[i]);
    }
    for(var i in toRemove)  
        this.cache.emails.splice(this.cache.emails.indexOf(toRemove[i]),1);
};

manager.prototype.SendEmail =   function(email)  {
    this.smtp.sendMail(email, function(error, response){
        if(error)
            console.log("Email Error: ",error);
        else
            console.log("Message sent: ",response.message);
        
    });
};

manager.prototype.AdvCheck      =   function()  {
    for(var m in this.cache.machines)   {
        var machine =   this.cache.machines[m];
        var report  =   "";
        reportdata  =   {
            "name"      :   machine.name,
            "reports"   :   []
        };
        
        var doReport = false;
        
        if(machine.info2.disks !== undefined)   {
            for(var n in machine.info2.disks)   {
                var disk    =   machine.info2.disks[n];
                var percent =   100 * (disk.free / disk.total); 
                if(percent <= this.config.diskminspace)  {
                    doReport = true;
                    report += "<BR>Disk space on critical level <B>"+disk.name+"</B>. Total: "+(disk.total/1024/1024/1024)+"GiB - Free: "+(disk.free/1024/1024/1024)+" ("+(Math.round(percent*100)/100)+"%)";
                    if(reportdata.reports.indexOf("disk") == -1)
                        reportdata.reports.push("disk");
                }
            }
        }
        
        /*
        if(machine.info2.cpus !== undefined)    {
        
        }
        */
        
        reportdata["report"] = report;
        if(doReport)    {   
            this.SendReport(reportdata);
            console.log("Sending report of "+machine.name+" with "+reportdata.reports.join(" "));
        }
        
    }
    
    this.AdvProcess =   setTimeout(function(){_man.AdvCheck();}, 30*60*1000);
};

manager.prototype.SendReport    =   function(reportdata)    {
    this.AddEmail({
        name    :   "advreport-"+reportdata.name+"-"+Date.now(),
        from    :   this.mailoptions.from,
        to      :   this.mailoptions.to,
        subject :   "Alive Control Advanced Report ("+reportdata.name+") [ "+reportdata.reports.join(" ")+" ]",
        headers :   this.mailoptions.headers,
        text    :   "Your email client does not support HTML. Please use one that does support.",
        html    :   "This is an automatic generated report by AliveControl.<BR>If you are seeing this message that means you have an alert. This is a important message.<BR><BR><h3>This report is about <B>"+reportdata.name+"</B></h3><BR><BR>"+reportdata.report+"<BR><BR><BR><BR>This has been generated by "+(this.config.servername===undefined?os.hostname():this.config.servername)+"  at "+Date().toString()
    });   
};

manager.prototype.CheckAlives   =   function()  {
    var _man = this;
    console.log("Checking lives");
    for(var m in this.cache.machines)   {
        var machine = this.cache.machines[m];
        if(machine.lastupdate + this.config.timeout*1000 < Date.now()) {
            console.log("Timeout for "+machine.name+" - ",machine.lastupdate + this.config.timeout,Date.now());
            this.AddEmail({
                name    :   machine.name+"-"+Date.now(),
                from    :   this.mailoptions.from,
                to      :   this.mailoptions.to,
                subject :   "Alive Control Report ("+machine.name+")",
                headers :   this.mailoptions.headers,
                text    :   this.mailoptions.text.replace("[MACHINE]",machine.name).replace("[TIMEOUT]",this.config.timeout),
                html    :   this.mailoptions.html.replace("[MACHINE]",machine.name).replace("[TIMEOUT]",this.config.timeout).replace("[SERVER]",this.config.servername===undefined?os.hostname():this.config.servername).replace("[TIME]", Date().toString())
            });
        }
    }
    this.FlushEmails();
    this.Process    =   setTimeout(function(){_man.CheckAlives();}, this.config.roundtime === undefined ? 10*60*1000 :  this.config.roundtime*1000);
};

manager.prototype.UpdateMachine =   function(data)  {
    var found = false;
    for(var m in this.cache.machines)   {
        if(this.cache.machines[m].hash  ==  data.hash)  {
            this.cache.machines[m].lastupdate = Date.now();
            this.cache.machines[m].info     =   data.info;
            this.cache.machines[m].info2    =   data.info2;
            found = true;
            
            this.db.query("UPDATE `cache` SET `lastupdate` = ?, `info` = ?, `info2` = ?", [this.cache.machines[m].lastupdate,data.info,JSON.stringify(data.info2)], function(err, results)  {
                if(err) 
                    console.log("MySQL Error when doing query ["+this.sql+"]: \n",err);
            });
            break;
        }
    }
    if(!found)  
        console.log("Machine not found at database: ",data);
};

manager.prototype.Encrypt       =   function(data,password) {
    var AESKEY_HASH =   crypto.createHash('sha256');
    
        AESKEY_HASH.update(password);
        
    var AESKEY      =   AESKEY_HASH.digest('base64');
    var cipher      =   crypto.createCipher('aes-256-ecb', new Buffer(AESKEY, 'base64')); 
    cipher.update(new Buffer(data));
    return cipher.final('base64');
};

manager.prototype.Decrypt       =   function(data,password) {
    //TODO
};

manager.prototype.AddMachine    =   function(data)  {
    //TODO: Authentication Keys
    
    var salt    =   bcrypt.genSaltSync(10);
    var hash    =   bcrypt.hashSync(Date.now().toString()+JSON.stringify(data), salt);
    var authkey =   bcrypt.hashSync(hash+salt+hash+Date.now().toString(), salt);
    
    var machine = {
        name        :   data.name,
        hash        :   hash,
        authkey     :   authkey,
        lastupdate  :   Date.now(),
        info        :   this.Encrypt(JSON.stringify(data.info),authkey),
        info2       :   data.info2,
        extra       :   this.Encrypt(JSON.stringify(data.extra,authkey)
    };
    
    this.cache.machines.push(machine);
    machine.user_id = data.uid;
    
    this.db.query("INSERT INTO `cache` SET ?",machine, function(err, result)    {
        if(err) 
            console.log("MySQL Error when doing query ["+this.sql+"]: \n",err);
    });
    
    return {"hash":hash,"authkey":authkey};
};

manager.prototype.CheckUser     =   function(user,pass,callback)    {
    this.db.query("SELECT * FROM `user` WHERE `username` = "+mysql.escape(user), function(err, rows, fields)    {
        if(err) 
            callback(false,err);
        else{
            if(rows.length == 0)    
                callback(false,"Invalid username or password");
            else{
                var ok = bcrypt.compareSync(pass, rows[0].password);
                if(ok)  
                    callback(true,"",rows);
                else
                    callback(false,"Invalid username or password");
            }
        }
    });
};

manager.prototype.LoadCache     =   function()  {
    var _man = this;
    this.cache  =   {   
        "machines"  :   [],
        "emails"    :   []
    }
    this.db.query("SELECT * FROM `cache`", function(err, rows, fields)  {
        for(var r in rows)    {
            var machine = {
                "name"      :   rows[r].name,
                "hash"      :   rows[r].hash,
                "authkey"   :   rows[r].authkey,
                "lastupdate":   rows[r].lastupdate,
                "info"      :   rows[r].info,
                "info2"     :   JSON.parse(rows[r].info2),
                "extra"     :   rows[r].extra
            };
            _man.cache.machines.push(machine);
        }
        console.log("Loaded "+rows.length+" machines to cache.");
    });
};


exports.manager = manager;
